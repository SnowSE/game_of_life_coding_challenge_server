@page "/StartGame"
@using System.Threading
@using System.Text.Json
@using Contest.Shared
@using Contest.Shared.Models;

@inject IGameService game
@inject NavigationManager NavManager

<h1>Start Game</h1>

<div>
    @if (gameIsStarting)
    {
        <p>Solving game...</p>
        <p>Once solution is ready clients will be notified the game has started!</p>
    }
    else
    {
        <label>Pick a default game:</label>
        <select @bind="SelectedDefaultGame" disabled="@isBoardSolved">
            @foreach (var game in DefaultGames.Keys)
            {
                <option value="@game">@game</option>
            }
        </select>
        <label>Number of generations to compute:</label><br />
        <input type="text" @bind="NumGenerations" disabled="@isBoardSolved" />
        <div asp-validation-summary="All" class="text-danger"></div>
        <label>Configure Starting Board</label>
        <textarea class="form-control"
            @bind-value="SerializedBoard"
            @bind-value:event="oninput"
            disabled="@isBoardSolved"></textarea>
        <label>Paste in RLE</label>
        <textarea class="form-control" @bind="startingRle" disabled="@isBoardSolved" ></textarea>
        <button class="btn btn-info" @onclick="convertRle" disabled="@isBoardSolved">Convert RLE to json</button>
        <button class="btn btn-primary" @onclick="solveBoard" disabled="@isBoardSolved">Solve board (prepare game)</button>
        <hr/>
        <button class="btn btn-danger" @onclick="startGame" disabled="@isPreparingBoard" >Start Game</button>
    }
</div>

@code {
    public Dictionary<string, string> DefaultGames = new Dictionary<string, string>(new[]
    {
        new KeyValuePair<string, string>("", "[]"),
        new KeyValuePair<string,string>("Gosper Glider Gun", SampleGames.GosperGliderGunInitial),
        new KeyValuePair<string, string>("Left Leaning O", SampleGames.LeftLeaningO),
    });
    string selectedDefaultGame;
    string SelectedDefaultGame
    {
        get { return selectedDefaultGame; }
        set
        {
            selectedDefaultGame = value;
            SerializedBoard = DefaultGames[selectedDefaultGame];
        }
    }

    string startingRle = string.Empty;
    bool gameIsStarting = false;
    private JsonSerializerOptions options;
    private bool isPreparingBoard = true;
    private bool isBoardSolved = false;
    private IEnumerable<Coordinate> startingBoard => JsonSerializer.Deserialize<IEnumerable<Coordinate>>(SerializedBoard);
    private IEnumerable<Coordinate> finalBoard = null;
    public int NumGenerations { get; set; } = 150;
    public string SerializedBoard { get; set; }

    protected override void OnInitialized()
    {
        SelectedDefaultGame = DefaultGames.Keys.First();
    }

    public void convertRle()
    {
        SerializedBoard = JsonSerializer.Serialize(RleParser.FromRle(startingRle));
    }

    public async Task solveBoard()
    {
        finalBoard = await Task.Run<IEnumerable<Coordinate>>(() =>
        {
            var endingBoard = GameSolver.Solve(startingBoard, NumGenerations, batchSize: NumGenerations);
            return endingBoard;
        });
        isBoardSolved = true;
        isPreparingBoard = false;
    }

    public void startGame()
    {
        if (isPreparingBoard)
            return;

        gameIsStarting = true;

        game.StartGame(startingBoard, NumGenerations, finalBoard);
        NavManager.NavigateTo("leaderboard");
    }
}
