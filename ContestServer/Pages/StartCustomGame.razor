@page "/StartCustomGame"
@using System.Threading
@using Newtonsoft.Json
@using Contest.Shared
@using Contest.Shared.Models;
@using System.IO;


@inject IGameService game
@inject NavigationManager NavManager

<h1>Start Custom Game</h1>

<div>
    @if (gameIsStarting)
    {
        <p>Solving game...</p>
        <p>Once solution is ready clients will be notified the game has started!</p>
    }
    else
    {
        <label>Number of generations to compute:</label>
        <br />
        <input type="text" @bind="NumGenerations"/>
        <br />

        <label>Enter Starting Board</label>
        <br />
        <InputFile OnChange="HandleSelectionStarting" />
        <p>@statusStarting</p>
        <br />

        <label>Enter Ending Board</label>
        <br />
        <InputFile OnChange="HandleSelectionEnding" />
        <p>@statusEnding</p>
        <hr/>
        <button class="btn btn-danger" @onclick="startGame">Start Game</button>
    }
</div>

@code {
    bool gameIsStarting = false;
    public int NumGenerations { get; set; } = 150;
    public string SerializedStartingBoard { get; set; } = "[]";
    public string SerializedEndingBoard { get; set; } = "[]";

    string statusStarting { get; set; }

    string statusEnding { get; set; }

    async Task HandleSelectionStarting(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            Console.WriteLine("started reading file");
            
            var reader = new StreamReader( file.Data );
            SerializedStartingBoard = await reader.ReadToEndAsync();
            Console.WriteLine("ended reading file");

            statusStarting = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }
    async Task HandleSelectionEnding(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            Console.WriteLine("started reading file");
            
            var reader = new StreamReader( file.Data );
            SerializedEndingBoard = await reader.ReadToEndAsync();
            Console.WriteLine("ended reading file");

            statusEnding = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }

    public void startGame()
    {
        gameIsStarting = true;
        var startingBoard = JsonConvert.DeserializeObject<IEnumerable<Coordinate>>(SerializedStartingBoard);
        var endingBoard = JsonConvert.DeserializeObject<IEnumerable<Coordinate>>(SerializedEndingBoard);

        if(startingBoard.Count() == 0 || endingBoard.Count() == 0)
            Console.WriteLine("#######One Board Was 0########");
        game.StartGame(startingBoard, NumGenerations, endingBoard);
        NavManager.NavigateTo("leaderboard");
    }
}
