@page "/"
@using System.Threading;
@using Contest.Shared.Models;
@using Contest.Shared.Enums;
@using System.IO;
@using Markdig;
@inject IContestantService contestantService;
@inject ITimeService  timeService;
@inject IGameService gameService;

<h1>Conway's Game of Life</h1>

@if (Contestants.Any())
{
    <h3>Current Contestants (@Contestants.Count()):</h3>
    <ul>
        @foreach (var contestant in Contestants)
        {
            <li>@contestant.Name (last seen at @contestant.LastSeen.ToShortTimeString())</li>
        }
    </ul>
}
else
{
    <h3>No one has registered yet.</h3>
}

<div>
    <h3>Instructions</h3>
    @* @((MarkupString)instructions) *@
    <ul>
        <li><p>Go to /register and send {"name": "your name"} in the body. You will receive back a token that needs to be included in all future messages.</p></li>
        <li>
            Post to /update with an UpdateRequest in the following format:<br />
            <pre>
  {"token": "{guid value}", "clientStatus": "waiting"}
            </pre>
            <p>You will get a response back with a gameState ("NotStarted"), generationsToCompute (nullable int), seedBoard (list of Coordinates), isError (bool), errorMessage (string)</p>
        </li>
        <li><a href="StartGame" class="btn btn-primary">Start Game</a></li>
        <li>
            Once the game has begun the gameState will become "InProgress", seedBoard will have the initial list of live cells, and generationsToCompute will have a value.
        </li>
    </ul>
</div>

<div>
    <h3>Game Status</h3>
    @if(gameService.GetGameStatus().IsStarted)
    {
        <h4>Game has started!</h4>
        <a href="leaderboard">See Game Stats</a>
    }
    else
    {
        <h4>Game has not started yet.</h4>
    }
</div>

@code {
    const int UserExpirationInSeconds = 60;

    public IEnumerable<Contestant> Contestants { get; private set; }

    public string instructions { get; set; }

    protected override void OnInitialized()
    {
        // var instructionsFilePath = Path.Combine(Directory.GetCurrentDirectory() + "/../README.md");
        // var instructionsText = File.ReadAllText(instructionsFilePath);
        // instructions = Markdown.ToHtml(instructionsText);
    }

    protected override async Task OnInitializedAsync()
    {
        Contestants = new Contestant[]{};
        var timer = new Timer(new TimerCallback(async _ =>
        {
            InvokeAsync(updateContestants);
        }), state: null, dueTime: 0, period: 2_000);
    }

    private async Task<bool> updateContestants()
    {
        return await Task.Run<bool>(() => {
            Contestants = contestantService.GetContestants();
            InvokeAsync(() => StateHasChanged());
            return true;
        });
        // var staleContestants = from c in allContestants
        //                        where c.LastSeen.AddSeconds(UserExpirationInSeconds) < timeService.Now()
        //                        select c;
        //
        // foreach (var staleContestant in staleContestants)
        // {
        //     contestantService.RemoveContestant(staleContestant);
        // }

        // Contestants = allContestants.Except(staleContestants);
    }
}